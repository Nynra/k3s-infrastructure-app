global:
  argocdConfig:
    project: "default"
    namespace: "argocd"
    server: "https://kubernetes.default.svc"

project: "default"

traefik:
  namespace: traefik

  dashboard:
    enabled: true
    ingressUrl: "traefik.example.com"
    externalCert:
      name: example-com-tls
      remoteSecretName: "example-com-tls"
      remoteSecretStore: "certs-vault"

traefikMiddlewares:
  crowdsecBouncerVersion: v1.3.3
  localOnlyAllowlist:
    localIpCIDRs:
      # Can also be restricted to certain subnets
      - 192.168.0.0/16 # 192.168.x.x
  rateLimiting:
    average: 100
    burst: 200
    period: 1s

certManager:
  name: cert-manager
  namespace: cert-manager
  # targetRevision: v1.17.2
  # replicas: 3

  issuers:
    - name: cloudflare-issuer-example
      privateKeyName: cloudflare-issuer-private-key
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      externalSecret:
        name: cloudflare-issuer-example-secret
        remoteSecretName: cloudflare-issuer-secret
        remoteSecretStore: kubernetes
        tokenPropertyName: password
      domains:
        - example1.com
        - example2.com
      # Add more domains as needed

  certsVault:
    name: certs-vault
    vaultName: homelab-certs-vault
    connectTokenSecretName: onepassword-connect-token
    connectTokenNamespace: external-secrets

  certs:
    - name: example-com-tls
      commonName: example.com
      clusterIssuer: letsencrypt-staging
      dnsNames:
        - example.com
        - "*.example.com"
      # Add more domains as needed

argocd:
  dashboard:
    ingressUrl: "argocd.example.com"
    externalCert:
      name: example-com-tls
      remoteSecretName: "example-com-tls"
      remoteSecretStore: "certs-vault"

crowdsec:
  targetRevision: 0.19.3
  namespace: crowdsec
  disableOnlineApi: "true"
  config:
    config_yaml_local: |
      api:
        server:
          auto_registration: # Activate if not using TLS for authentication
            enabled: true
            token: "${REGISTRATION_TOKEN}" # /!\ Do not modify this variable (auto-generated and handled by the chart)
            allowed_ranges: # /!\ Make sure to adapt to the pod IP ranges used by your cluster
              - "127.0.0.1/32"
              - "192.168.0.0/16"
              - "10.0.0.0/8"
              - "172.16.0.0/12"
      # This block was the problem. It needs to be indented.
      db_config:
        flush:
          agents_autodelete:
            ## Flush both login types if the machine has not logged in for 60 minutes or more
            cert: 60m # This is TLS client authentication
            login_password: 60m # This includes the auto registration token as well

  externalSecret:
    name: "crowdsec-secret"
    remoteSecretName: "crowdsec-credentials"
    remoteSecretStore: "kubernetes"
    csLapiSecretPropertyName: "lapi_secret"
    registrationTokenPropertyName: "registration_token"
    enrollKeyPropertyName: "enroll_key"

  dashboard:
    enabled: false
    # resources:
    #   {}
    # limits:
    #   memory: 1Gi
    #   cpu: 500m
    # requests:
    #   cpu: 500m
    #   memory: 1Gi

  agent:
    enabled: true
    isDeployment: false

  appsec:
    enabled: false

kubePrometheusStack:
  namespace: monitoring
  targetRevision: HEAD

  managerIps:
    - 192.168.3.100

  grafana:
    ingressUrl: "grafana.example.com"
    externalCert:
      name: example-com-tls
      remoteSecretName: "example-com-tls"
      remoteSecretStore: "certs-vault"

    externalSecret:
      name: grafana-admin-password
      remoteSecretName: "GrafanaAdminPassword"
      remoteSecretStore: "kubernetes"
      userPropertyName: "username"
      passwordPropertyName: "password"

# kubDashboard:
#   namespace: kubernetes-dashboard
#   targetRevision: 7.13.0
#   clusterName: "example-cluster"
#   ingressUrl: "dash.example.com"
#   tlsSecretName: example-com-tls

#   externalSecret:
#     name: kubernetes-dashboard-auth
#     refreshInterval: "1h"
#     remoteSecretName: "kubernetes-dashboard-auth"
#     remoteSecretStore: "kubernetes"
#     tokenProperty: "password"

longhorn:
  namespace: longhorn-system

  dashboard:
    enabled: true
    replicaCount: 1
    serviceType: ClusterIP # LoadBalancer can be used for debugging
    ingressUrl: "longhorn.example.com"
    externalCert:
      name: example-com-tls
      remoteSecretName: "example-com-tls"
      remoteSecretStore: "certs-vault"

vaults:
  mainVault:
    name: main-vault
    vaultName: homelab-vault
    connectTokenSecretName: onepassword-connect-token
    connectTokenNamespace: external-secrets
